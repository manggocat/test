*이메일 인증 맴핍부분(spring 프레임워크를 사용하여 구현)

@RequestMapping("emailAuth.do")
public ModelAndView emailAuth(httpServletResponse response,
HttpServletRequest request) throws Execption {

String email = request.getParameter("email");
String authNum ="";

authNum = RandomNum();

sendEmail(email.toString(), authNum);

ModelAndView mv = new ModelAndView();
mv.setViewName("/member/emailAuth.jsp");
mv.addObject("email", email);
mv.addObject("authNum", authNum);

return mv; 

}
* authNum = RandomNum();
RandomNum 함수를 호출하여 리턴값을 authNum에 저장한다.
*sendEamil(email.toString(), authNum);
sendEmail 함수를 호출한다.
email이 String이니 굳이 toString을 안해도 됨-수정해야함
여기서 email과 authNum을 매개변수로 함

*sendEmail 메소드

private void sendEmail(String eamil, String authNum) {
String host = "smtp.email.com"; //smtp서버
String subject = "NEGABOX 인정번호 전달";
String fromName = "네가박스 관리자";
String from = "       "; //보내는 메일
String to1 = email;

String content = "인증번호 [" +authNum+ "]";

try {
Properties props = new Properties();
//G-mail smtp 사용시
props.put("mail.smtp.starttls.enable", "true");
props.put("mail.transport.protocol", "smtp");
props.put("mail.smtp.host", host);
props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSoketFactory.class");
props.put("mail.smtp.port", "465"):
props.put("mail.smtp.user", from);
props.put("mail.smtp.auth", "true");

Session mailSession = Session.getInstance(props, new javax.mail.Authenticator() {
protected PasswordAuthentication getPasswordAuthentication() {
return new PasswordAuthentication("      ", "       ");
}
});
Message msg = new MimeMessage(mailSession);
msg.setFrom(new InternetAddress(from, MimeUtility.encodeText(fromName, "UTF-8", "B"))); //보내는 사람 설정

InternetAddress[] address1 = { new InternetAddress(to1) };
msg.setRecipients(Message.RecipientType.TO, address1); //받는 사람 설정1
msg.setSubject(subject); //제목설정
msg.setSentDate(new java.util.Date()); // 보내는 날짜 설정
msg.setContent(content, "text/html;charset=euc-kr"); //내용설정 (HTML 형식)

Transport.send(msg); //메일 보내기
}catch (MessagingException e) {
e.printStackTrace();
} catch (Exception e) {
e.printStackTrace();
}
}

*난수 발생시키는 메소드
public String RandomNum() {
StringBuffer buffer = new StringBuffer();
for(int i=0; i <=6; i++) {
int n = (int) (Math.random() *10);
buffer.append(n);
}
return buffer.toString();
}
//email 인증 추가 여기까지 

*이메일 인증 화면 jsp
<script>
function check() {
var form = document.authenform;
var authNum = ${authNum};

if(!form.authnum.value) {
alert("인증번호를 입력하세요");
return false;
}
if(form.authnum.value != authNum) {
alert("틀린 인증번호입니다. 인증번호를 다시 입력해 주세요.");
form.authnum.value="";
return false;
}
if(form.authnum.value==authNum) {
alert("인증완료");
opener.document.userinput.mailCheck.value="인증완료";
self.close();
}
}
</script>

<center>
<br/></br/>
<h5>인증 번호 7자리를 입력하세요</h5>

<div class= "container">
<form method="post" name="authenform" onSubmit="return check();">
<input type="text" name="authnum"><br/><br/>
<input type="submit" class="btn btn-info" value="Submit">
</form>
</div>



